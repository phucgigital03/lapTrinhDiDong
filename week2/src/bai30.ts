// bai30 placeholder

interface Todo {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
}

interface SettledReport {
  id: number;
  status: "fulfilled" | "rejected";
  value?: Todo;
  reason?: string;
}

const BASE = "https://jsonplaceholder.typicode.com/todos";

/**
 * fetchTodosAllSettled: fetch multiple todos and return per-id status.
 */
export async function fetchTodosAllSettled(ids: number[]): Promise<SettledReport[]> {
  const promises = ids.map(id =>
    fetch(`${BASE}/${id}`).then(r => {
      if (!r.ok) throw new Error(`HTTP ${r.status} for id ${id}`);
      return r.json() as Promise<Todo>;
    })
  );

  const settled = await Promise.allSettled(promises);

  return settled.map((res, idx): SettledReport => {
    const id = ids[idx];
    if (res.status === "fulfilled") {
      return { id, status: "fulfilled", value: res.value };
    } else {
      return { id, status: "rejected", reason: String(res.reason) };
    }
  });
}

/**
 * demoFetchTodosAllSettled: logs a readable summary.
 */
export async function demoFetchTodosAllSettled() {
  const ids = [1, 2, 123456]; // include a bad id to show rejection (may still 200 on this API, adjust if needed)
  const reports = await fetchTodosAllSettled(ids);
  for (const r of reports) {
    if (r.status === "fulfilled") {
      console.log(`ID ${r.id} OK: ${r.value?.title}`);
    } else {
      console.warn(`ID ${r.id} FAILED: ${r.reason}`);
    }
  }
  return reports;
}

// Example (uncomment to test):
// (async () => {
//   await demoFetchTodosAllSettled();
// })();

// ***Promise.all
// Nh·∫≠n v√†o 1 m·∫£ng promise.
// K·∫øt qu·∫£:
// N·∫øu t·∫•t c·∫£ promise th√†nh c√¥ng ‚Üí tr·∫£ v·ªÅ m·∫£ng k·∫øt qu·∫£.
// N·∫øu 1 promise th·∫•t b·∫°i ‚Üí d·ª´ng lu√¥n, reject ngay v·ªõi l·ªói ƒë√≥.
// üëâ D√πng khi b·∫°n mu·ªën t·∫•t c·∫£ ph·∫£i th√†nh c√¥ng, n·∫øu kh√¥ng th√¨ fail c·∫£.

// ***Promise.allSettled
// Nh·∫≠n v√†o 1 m·∫£ng promise.
// K·∫øt qu·∫£: lu√¥n resolve, tr·∫£ v·ªÅ m·∫£ng v·ªõi tr·∫°ng th√°i c·ªßa t·ª´ng promise:
// { status: "fulfilled", value: ... }
// { status: "rejected", reason: ... }
// üëâ D√πng khi b·∫°n mu·ªën ch·∫°y h·∫øt t·∫•t c·∫£ promise, b·∫•t k·ªÉ th√†nh c√¥ng hay th·∫•t b·∫°i.
